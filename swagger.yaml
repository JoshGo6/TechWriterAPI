openapi: 3.0.0
info:
  title: Josh's Demonstration API
  description: |-
    **NOTE: This API is non-functional. I created it to demonstrate API documentation.**
    This demonstration API manages information about users who contribute documentation to a knowledge base. It is used for:

    - Retrieving information about users who contribute to a knowledge base.
    - Registering new users to contribute documentation to the knowledge base.
    - Removing documentation contributors from the list of users.
    - Activating inactive users.
    - Deactivating active users.
    - Updating the personal information of existing documentation contributors.

  contact:
    name: Josh Goldstein
    url: "https://www.joshgoldstein.org"
    email: JoshGoldstein@JoshGoldstein.org
  version: 1.3.2
servers:
  - url: 'https://api.joshgoldstein.org/prod'
    description: Production API server
  - url: 'https://api.joshgoldstein.org/dev'
    description: Dev API server
security:
  - BasicAuth: []
tags:
  - name: Retrieve user data
    description: Obtain information about documentation contributors
  - name: Register a new user
    description: Register new documentation contributors
  - name: Manage users
    description: Manage documentation contributors and their user information
paths:
  /information:
    get:
      tags:
        - Retrieve user data
      summary: Retrieve list of users
      description: |
        Retrieve a list of documentation contributors, optionally filtered by `contributionLevel`.
      operationId: listUsers
      parameters:
        - name: id
          in: query
          description: |
            ID of the user.
          required: false
          style: form
          explode: true
          schema:
            maximum: 999
            minimum: 0
            type: integer
            example: 123
        - name: conributionLevel
          in: query
          description: |
            How frequently an author contributes documentation. Allowed values:
            - `infrequent`: Contributes 1-2 articles per year.
            - `occasional`: Contributes 3-4 articles per year.
            - `frequent`: Contributes 5 or more articles per year.
          required: false
          style: form
          explode: true
          schema:
            type: string
            example: frequent
            enum:
              - infrequent
              - occasional
              - frequent
      responses:
        '200':
          description: A list of users.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/List_of_users'
            application/xml:
              schema:
                $ref: '#/components/schemas/List_of_users'
        '404':
          description: User not found.
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/NotFoundSimpleError'
        '500':
          description: Server error. Please try again later.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerError'
      security: []
  /register:
    post:
      tags:
        - Register a new user
      summary: Register new user
      description: |
        Register a new tech. writer to the system. Only the sys. admin has authorization to use this endpoint.
      operationId: registerUser
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/register_body'
        required: true
      responses:
        '201':
          description: New user created successfully.
          content:
            text/plain:
              schema:
                type: string
                example: New user created succesfully.
        '400':
          description: Failed to create new user.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserNotCreated'
        '500':
          description: Server error. Please try again later.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerError'
      security:
        - apiKeyAuth: []
  '/User/{id}':
    delete:
      tags:
        - Manage users
      summary: Delete user
      description: Delete a user from the list of registered technical writers.
      operationId: deleteUser
      parameters:
        - $ref: '#/components/parameters/id'
      responses:
        '202':
          description: User deleted.
          content:
            text/plain:
              schema:
                type: string
                example: User deleted.
        '404':
          description: User not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundSimpleError'
        '500':
          description: Server error. Please try again later.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerError'
      security:
        - apiKeyAuth: []
    patch:
      tags:
        - Manage users
      summary: Update user information
      description: |
        Update any of the following user information:
        - `name`
        - `email`
        - `address`
        - `city`
        - `zip`
      operationId: patchUser
      parameters:
        - $ref: '#/components/parameters/id'
        - name: name
          in: query
          description: Name of user.
          required: false
          style: form
          explode: true
          schema:
            type: string
            example: Josh G.
        - name: email
          in: query
          description: Email address of user.
          required: false
          style: form
          explode: true
          schema:
            type: string
            example: josh.goldstein@awesome-tech-writer.com
        - name: address
          in: query
          description: Street address of the user.
          required: false
          style: form
          explode: true
          schema:
            type: string
            example: 1234 Writer St.
        - name: city
          in: query
          description: City of the user.
          required: false
          style: form
          explode: true
          schema:
            type: string
            example: 'Writerville, VA'
        - name: zip
          in: query
          description: Zip code of the user.
          required: false
          style: form
          explode: true
          schema:
            type: integer
            example: '20193'
      responses:
        '200':
          description: User updated.
          content:
            text/plain:
              schema:
                type: string
                example: User updated.
        '404':
          description: User not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundSimpleError'
        '500':
          description: Server error. Please try again later.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerError'
      security:
        - apiKeyAuth: []
  '/User/{id}/deactivate':
    patch:
      tags:
        - Manage users
      summary: Deactivate user
      description: Deactivate user from the list of technical writers currently contributing content.
      operationId: deactivateUser
      parameters:
        - $ref: '#/components/parameters/id'
      responses:
        '200':
          description: User deactivated.
          content:
            text/plain:
              schema:
                type: string
                example: User deactivated.
        '404':
          description: User not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundSimpleError'
        '500':
          description: Server error. Please try again later.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerError'
      security:
        - apiKeyAuth: []
  '/User/{id}/activate':
    patch:
      tags:
        - Manage users
      summary: Reactivate user
      description: Reactivate user who was previously deactivated.
      operationId: activateUser
      parameters:
      - $ref: '#/components/parameters/id'
      responses:
        '200':
          description: User is now active again.
          content:
            text/plain:
              schema:
                type: string
                example: User is now active again.
        '404':
          description: User not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundSimpleError'
        '500':
          description: Server error. Please try again later.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerError'
      security:
        - apiKeyAuth: []
components:
  schemas:
    List_of_users:
      type: object
      properties:
        users:
          type: array
          items:
            $ref: '#/components/schemas/User'
    NotFoundSimpleError:
      type: string
      example: User 123 not found.
    ServerError:
      type: object
      properties:
        errornum:
          type: integer
          example: 500
        errortext:
          type: string
          example: Josh's server is busy.
    UserNotCreated:
      type: object
      properties:
        message:
          type: string
          example: 'You are missing the following parameters:'
        missingParameters:
          type: array
          items:
            type: string
            example: email
    register_body:
      type: object
      properties:
        name:
          type: string
          example: Josh Goldstein
        email:
          type: string
          example: JoshGoldstein@JoshGoldstein.org
        address:
          type: string
          example: 1234 Writer St.
        city:
          type: string
          example: 'Writerville, VA'
        zip:
          type: integer
          example: '20193'
    User:
      type: object
      properties:
        id:
          type: integer
          example: 123
        name:
          type: string
          example: Josh G.
        email:
          type: string
          example: josh.goldstein@awesome-tech-writer.com
        contributionLevel:
          type: string
          example: frequent
          enum:
            - infrequent
            - occasional
            - frequent
        numberOfArticlesWritten:
          maximum: 10000
          minimum: 1
          type: integer
          example: 7
  parameters:
    id:
      name: id
      in: path
      description: |
        ID of the user.
      required: true
      style: simple
      explode: false
      schema:
        type: integer
        example: 123
        minimum: 0
        maximum: 999
    name:
      name: name
      in: query
      description: Name of user.
      required: false
      style: form
      explode: true
      schema:
        type: string
        example: Josh G.
    email:
      name: email
      in: query
      description: Email address of user.
      required: false
      style: form
      explode: true
      schema:
        type: string
        example: josh.goldstein@awesome-tech-writer.com
    address:
      name: address
      in: query
      description: Street address of the user.
      required: false
      style: form
      explode: true
      schema:
        type: string
        example: 1234 Writer St.
    city:
      name: city
      in: query
      description: City of the user.
      required: false
      style: form
      explode: true
      schema:
        type: string
        example: 'Writerville, VA'
    zip:
      name: zip
      in: query
      description: Zip code of the user.
      required: false
      style: form
      explode: true
      schema:
        type: integer
        example: '20193'
    contributionLevel:
      name: conributionLevel
      in: query
      description: |
        How frequently an author contributes documentation. Allowed values:
        - `infrequent`: Contributes 1-2 articles per year.
        - `occasional`: Contributes 3-4 articles per year.
        - `frequent`: Contributes 5 or more articles per year.
      required: false
      style: form
      explode: true
      schema:
        type: string
        example: frequent
        enum:
          - infrequent
          - occasional
          - frequent
    numberOfArticlesWritten:
      name: numberOfArticlesWritten
      in: query
      description: How many articles the user has written.
      required: false
      style: form
      explode: true
      schema:
        maximum: 10000
        minimum: 1
        type: integer
        example: 7
    id-optional:
      name: id-optional
      in: query
      required: false
      schema:
        type: integer
        minimum: 0
        maximum: 999
        example: 123
        default: 123
      description: id of the tech. writer.
  securitySchemes:
    apiKeyAuth:
      type: apiKey
      name: X-API-key
      in: header
    BasicAuth:
      type: http
      scheme: basic